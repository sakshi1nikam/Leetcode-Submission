                                                                           Perfect Number 
Solution:-----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    bool checkPerfectNumber(int num) {
        int sum=0;
        for(int i=1;i*i<num;i++)
        {
            if(num%i==0)
            {
                sum+=i;
                if(i*i!=num)
                {
                    sum+=num/i;
                }

            }
        }

        return (sum-num==num);

    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL QUERY :
Group Sold Product By The Date:
Solution:

SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date ASC

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Climbing Stairs :
Solution :

class solution {
public:
     int climbStairs(int n)
     {
       int a=0,b=1,c=0;
       for(int i=0 ; i<n; i++)
       {
          c=a+b;
          a=b;
          b=c;
       }
       return c ;
      }
 };
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Minimum Falling Path Sum :
Solution :

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
       int n=matrix.size();
       for(int i=1;i<n;i++){
           for(int j=0;j<n;j++){
               matrix[i][j]+=min({matrix[i-1][j],matrix[i-1][max(0,j-1)],matrix[i-1][min(n-1,j+1)]});
           }
       } 
       return *min_element(matrix[n-1].begin(),matrix[n-1].end());
    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
House Robber :
Solution:

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n < 2) return n ? nums[0] : 0;
        vector<int>dp(n);
        dp[0] = nums[0], dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; i++)
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
        return dp[n - 1];
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Longest Common Subsequenece:
Solution:

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.length(),m=text2.length();
        vector<int>curr(m+1,0);
        vector<int>next(m+1,0);
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                int ans=0;
                if(text1[i]==text2[j]){
                    ans=1+next[j+1];
                }else{
                    ans=max(next[j],curr[j+1]);
                }
                curr[j]=ans;
            }
            next=curr;
        }
        return next[0];
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                              Reverse Polish Notation
Solution:

#define ll long long
class Solution {
public:
    ll cal ( ll num1 , ll num2 , char &op)
    {
        switch(op)
        {
            case '-':
            return num1-num2;
            break;

            case '+':
            return num1+num2;
            break;

            case '*':
            return num1*num2;
            break;

            case '/':
            return num1/num2;
            break;
        }
        return 0;
    }
    int evalRPN(vector<string>& tokens) {
        
        stack <ll> s ;
        for(auto &i  : tokens)
        {
            if(i=="-" or i=="+" or i=="*" or i=="/")
            {
                ll a = s.top();
                s.pop();
                ll b = s.top();
                s.pop();
                s.push(cal(b,a,i[0]));
            }

            else
            {
                s.push(stoi(i));
            }
        }

        return s.top();
        
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                        Implement queue using stack
                                                        
                                                        
 Solution:
 
 class MyQueue {
public:
    stack<int> s1, s2;  // s1 => actual queue like ||  s2 => help s1 to behave as queue
    MyQueue() {}

    void push(int x) {        
        while(!s1.empty()){   // put all values of s1 in s2 for time being
            s2.push(s1.top());
            s1.pop();
        }
        s1.push(x);       // push element to the bottom of s1
        while(!s2.empty()){  // get back all value form s2
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int p = s1.top();
        s1.pop();
        return p;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        return s1.empty();
    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Daily Temprature :-
Solution:-

lass Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        int n = temperatures.size();
        stack<pair<int,int>> st;
        vector<int> ans(n);
        
        for(int i = 0;i<n;i++){
            while(!st.empty() && st.top().first<temperatures[i]){
                auto [num,day] = st.top();
                ans[day] = i-day;
                st.pop();
            }
            st.push({temperatures[i],i});
        }
        return ans;    
    }
};

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Keys and Rooms :-

Solutions:-

class Solution {

    int totalvisit;
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {

        int n = rooms.size();
        boolean [] visited = new boolean[n];

        dfs(rooms, visited , 0);

        return totalvisit==n;
    }


        public void dfs(List<List<Integer>> rooms , boolean [] visited , int start)
        {
             visited[start]=true;
             totalvisit++;

             for(int nei: rooms.get(start))
             {
                 if(!visited[nei])
                 {
                     dfs(rooms, visited,nei);
                 }
             }


        }

        
    }
    --------------------------------------------------------------------------------------------------------------------------------------------------------------------
Possible Bipartition:-
Solution:-

/*representation
like = 1 (blue team)
dislike or don't like = -1 (red team) */

class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        int[] color=new int[n+1];
        List<Integer>[] graph=new List[n+1];  //array contains list inside it
        for(int i=0;i<=n;i++){
            graph[i]=new ArrayList<>();
        }

        for(int[] v: dislikes){
            graph[v[0]].add(v[1]);
            graph[v[1]].add(v[0]);
        }

        for(int i=1;i<=n;i++){      //iterating on color array
            if(color[i]==0){
               LinkedList<Integer> q=new LinkedList<>();
               q.add(i);
               color[i]=1;

               while(!q.isEmpty()){
                   int top=q.removeFirst();
                   for(int nbr: graph[top]){
                       if(color[nbr]==color[top]) return false;
                       if(color[nbr]==0){
                           color[nbr]=-color[top];  //as we know the neighbaour of popped() element are the ///one tho whome top element don't like/dislikelike therefore -1;  
                           q.add(nbr);
                       }
                   }
               }
            }
        }
        return true;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Domino and Tromino Tiling:-
Solution:-

class Solution {
    private static final int MOD = 1000000007;
  public int numTilings(int n) {
      if(n<=1) return 1;
      if(n==2) return 2;
      long[] dp=new long[n+1];
      dp[0]=1; dp[1]=1; dp[2]=2;
      for(int i=3;i<=n; i++){
        dp[i]=(2*dp[i-1]+dp[i-3]) %MOD; 
      }
      
      return (int) dp[n];
    }
}


C++:-
class Solution {
public:
    int numTilings(int n) {
        int mo = 1e9 + 7;
        vector<long long int>arr(1001,0);
        arr[0] = 0;
        arr[1] = 1;
        arr[2] = 2;
        arr[3] = 5;
        if(n <= 3)return arr[n];
        for(int i = 4;i <= n;i++){
            arr[i] = arr[i-1]*2 + arr[i-3];
            arr[i] %= mo;
        }
        return arr[n];
    }
    
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Largets Element In array:-
Solution:-


//User function Template for Java

class Solution {
    int print2largest(int arr[], int n) {
        // code here
        int max=Arrays.stream(arr).max().getAsInt();
        int diff=max;int ans=0,j=0;
        for(int i:arr)
        {
            if(i!=max)
            {
               if(diff>(max-i))
               {
                   ans=i;
                   diff=max-i;
               }
               if(max+diff==0) return -1;
            }
            if(max==i) j++;
        }
        if(j==arr.length) return -1;
        return ans;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jump Game:-
Solution-
class Solution {
    public boolean canJump(int[] nums) {

        int n=nums.length,i=n-2;
        int goal=n-1;
        while(i>=0){
            if(i+nums[i]>=goal){
                goal=i;
                i--;
            }else{i--;}
        }
        return goal==0?true:false;
    
        
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search:
Solution:-

class Solution {
    public int search(int[] nums, int target) {

             int low = 0;
     int high = nums.length - 1;
     while(low <= high) {
        int middle = (low + high) / 2;
        if(nums[middle] == target) return middle;
        if(nums[middle] < target) low = middle + 1;
        if(nums[middle] > target) high = middle - 1;
        
   }
    return -1;
}
        
    }
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------
Move Zeros:
Solution:-

class Solution {
    public void moveZeroes(int[] nums) {
        int count=0,k=0;
        int n=nums.length;
        int[] new1=new int[nums.length];
        Arrays.fill(new1,0);
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0)
            {
                new1[count++]=nums[i];
            }
            else
            {
                k++;
            }
        }
        for(int j=0;j<nums.length;j++)
        {
            nums[j]=new1[j];
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Missing Number:-
Solution:-
class Solution {
    public int missingNumber(int[] nums) {
        
        int N = nums.length;
        int res= N*(N+1)/2;
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=nums[i];
        }
        return res-sum;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Max Consecutive Ones:-
Solution:-

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int j=0,max=0;
        for(int i:nums)
        {
            if(i==1) j++;
            else j=0;
            if(max<j) max=j;
        }
        return max;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Maximize Number of 1's

Solution:-



// User function Template for Java

class Solve {
    // m is maximum of number zeroes allowed to flip
    int findZeroes(int arr[], int n, int m) {
        
        int WR=0,WL=0;
        int bestWindow=0;
        int zerocount=0;
        
        while(WR<n)
        {
            if(zerocount<=m)
            {
                if(arr[WR]==0)
                {
                    zerocount++;
                }
                WR++;
            }
            
            if(zerocount>m)
            {
                if(arr[WL]==0)
                {
                    zerocount--;
                }
                WL++;
            }
            
            if((WR-WL> bestWindow) && (zerocount<=m))
            {
                bestWindow=WR-WL;
            }
        
        }
        return bestWindow;
        
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Detect Capital:-

Solution:-

class Solution {
    public boolean detectCapitalUse(String word) {
        
        int num_capitals=0;
        for(int i=0;i<word.length();i++)
        {
            char c = word.charAt(i);
            if(Character.isUpperCase(c))
            {
                num_capitals++;
            }
        }

        return num_capitals==0 || (num_capitals==1 && Character.isUpperCase(word.charAt(0))) || num_capitals==word.length(); 
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Delete Columns to Make Sorted :-
Solution:-
java-
class Solution {
    public int minDeletionSize(String[] strs) {

        int deleted=0;

        int n = strs.length;
        int m = strs[0].length();

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 1 ; j < n ; j++)
            {
                if(strs[j].charAt(i) < strs[j-1].charAt(i))
                {
                      deleted++;
                      break;
                }
            }
        }

        return deleted;
        
    }
    
    c++ :-
    class Solution {
public:
    int minDeletionSize(vector<string>& strs) {

        int count=0;
        int row=strs.size();
        int col = strs[0].size();

        for(int i=0 ; i<col ; i++)
        {
            for(int j=0; j<row-1 ; j++)
            {
                if(strs[j][i] > strs[j+1][i])
                {
                    count++;
                    break;
                }
            }
        }

        return count;
        
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Minimum rounds to complete all tasks:
Solution:-
class Solution {
    Map<Integer, Integer> memo = new HashMap<>();
    public int minimumRounds(int[] tasks) {
        Arrays.sort(tasks);
        int res = dp(0, tasks);
        if(res == Integer.MAX_VALUE || res < 0) return -1;
        return res;
    }
    
    public int dp(int i, int[] tasks) {
        if(memo.containsKey(i)) return memo.get(i);
        if(i == tasks.length) return 0;
        else if(i > tasks.length || i == tasks.length - 1) memo.put(i, Integer.MAX_VALUE);
        else if(tasks[i] != tasks[i+1]) memo.put(i, Integer.MAX_VALUE);
        else if(i+2 < tasks.length && tasks[i] == tasks[i+2]){
            memo.put(i, 1 + Math.min(dp(i + 2, tasks), dp(i + 3, tasks)));
        }
        else memo.put(i, 1 + dp(i + 2, tasks));
        return memo.get(i);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Maximum Subarray:-
Solution:-
class Solution {
    public int maxSubArray(int[] nums) {
        int curr_sum=0,max_sum=Integer.MIN_VALUE;
        for(int i:nums)
        {
            curr_sum=curr_sum+i;
            if(curr_sum>max_sum)
            {
                max_sum=curr_sum;
            }
            if(curr_sum<0)
            {
                curr_sum=0;
            }
        }
        return max_sum;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rearrange the positive and negative numbers in array:-
Solution:-

class Solution
{
    void rearrange(int arr[],int n)
    {
        ArrayList <Integer> pos = new ArrayList <>();
        ArrayList <Integer> neg = new ArrayList <>();
        for(int i:arr)
        {
            if(i>=0)
            {
                pos.add(i);
            }
            else
            {
                neg.add(i);
            }
        }
        ArrayList <Integer> ans = new ArrayList <> ();
        int i=0 ; int j=0;
        while(i<pos.size() || j<neg.size())
        {
            if(i<pos.size())
            {
                ans.add(pos.get(i));
                i++;
            }
            if(j<neg.size())
            {
                ans.add(neg.get(j));
                j++;
            }
        }
        for(int k=0;k<ans.size();k++)
        {
            arr[k]=ans.get(k);
        }
        }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                  Reverse Integer
  
  Solution:-
  class Solution {
    public int reverse(int x) {

        int ans=0;
        while(x!=0)
        {
            int digit = x%10;
            if((ans>Integer.MAX_VALUE/10) || (ans<Integer.MIN_VALUE/10))
            {
                return 0;
            }
            ans = ans*10 + digit;
            x=x/10;
        }
        return ans;
        
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                    First Bad Version
Solution:-
// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        long long l = 1, r = n;
        while(l <= r) {
            long long mid = (l + r) / 2;
            if(isBadVersion(mid)) r = mid - 1;
            else l = mid + 1;
        }
        return l;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                     Difference between sum of element and sum of digits :-
Solution:-
class Solution {
public:
     
    int differenceOfSum(vector<int>& nums) {
        
        int ele_sum=0 , dig_sum=0;
        for(int i:nums)
        {
            ele_sum+=i;
            while(i>0)
            {
               dig_sum += (i%10);
               i/=10;
            }
         
         }
         
         
         return (ele_sum - dig_sum);
    }
};

java:-
class Solution {
    public int differenceOfSum(int[] nums) {
        int ele_sum=0,dig_sum=0;
        for(int i:nums)
        {
            ele_sum+=i;
            while(i>0 || (i%10)>0)
            {
                dig_sum+=(i%10);
                i/=10;
            }
        
        }
        return (ele_sum - dig_sum);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                     Jewels and Stones
Solution:-
c++:-
class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        int count = 0;
        for(char ch1:jewels)
        {
            for(char ch2:stones)
            {
                if(ch1==ch2)
                {
                    count++;
                }
            }
        }
        return count;
    }
};

java:-
class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        int count=0;
        for(int i=0;i<jewels.length();i++)
        {
            char ch1 = jewels.charAt(i);
            for(int j=0;j<stones.length();j++)
            {
                char ch2 = stones.charAt(j);
                if(ch1==ch2)
                {
                    count++;
                }
            }
        }
        return count;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                              
                                                                 Merged two soretd list
                                                                
Solution:
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyhead= new ListNode();
        ListNode tail=dummyhead;
        while(list1!=null && list2!=null){
            if(list1.val<list2.val){
                tail.next=list1;
                list1=list1.next;
                tail=tail.next;
            }
            else{
                tail.next=list2;
                list2=list2.next;
                tail=tail.next;
            }
        }
        tail.next=(list1!=null)?list1:list2;
        return dummyhead.next;
                }
     }
     -------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                    Non - decreasing subsequence:-
 
 Solution:-
 
 class Solution {
public:
    map<vector<int>,int>mp;
    void solve(vector<vector<int>>&res,vector<int>&nums,int x,vector<int>&temp){
    if(temp.size()>=2)
        {   
         mp[temp]++;
         if(mp[temp]>1)
             return;
         res.push_back(temp);
     
        }
        if(x>nums.size())
        {
              return ;
        }
        

        for(int i=x;i<nums.size();i++){
            if(temp.size()>=1)
            {if(nums[i]<temp[temp.size()-1])
                continue;}
            
            temp.push_back(nums[i]);
            solve(res,nums,i+1,temp);
            temp.pop_back();//backtracking the changes we made
           
        }
        return;
    }
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>>result;
        vector<int>temp;
        solve(result,nums,0,temp);
            
        return result;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                        Design A parking System
Solution:-

class ParkingSystem {
public:
        vector<int> count;
    ParkingSystem(int big, int medium, int small) {
        count = {big, medium, small};
    }

    bool addCar(int carType) {
        return count[carType - 1]-- > 0;
    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                      Palindrome Partitioning
                                                      
Solution:-
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> path;
        partition(s, 0, path, result);//dfs calls
        return result;
    }
private: 
    //DFS steps
    void partition(string& s, int start, vector<string>& path, vector<vector<string>>& result) {
        int n = s.length();
        if (start == n) {
            result.push_back(path);
        } else {
            for (int i = start; i < n; i++) {
                if (isPalindrome(s, start, i)) {
                    path.push_back(s.substr(start, i - start + 1));
                    partition(s, i + 1, path, result);
                    path.pop_back();
                }
            }
        }
    }
    bool isPalindrome(string& s, int l, int r) {
        while (l < r) {
            if (s[l++] != s[r--]) {
                return false;
            }
        }
        return true;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                               Verifying an Alien Dictionary
Solution:-
class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        int[] orderMap = new int[26];
        for (int i = 0; i < order.length(); i++){
            orderMap[order.charAt(i) - 'a'] = i;
        }

        for (int i = 0; i < words.length - 1; i++) {

            for (int j = 0; j < words[i].length(); j++) {
                if (j >= words[i + 1].length()) return false;

                if (words[i].charAt(j) != words[i + 1].charAt(j)) {
int currentWordChar = words[i].charAt(j) - 'a';
int nextWordChar = words[i + 1].charAt(j) - 'a';
                    if (orderMap[currentWordChar] > orderMap[nextWordChar]) return false;
                    else break;
                }
            }
        }

        return true;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                            ZigZag Conversion
Solution:-
class Solution {
public:

    string convert(string s, int numRows) {
    
    if(numRows <= 1) return s;

    vector<string>v(numRows, ""); 

    int j = 0, dir = -1;

    for(int i = 0; i < s.length(); i++)
    {

        if(j == numRows - 1 || j == 0) dir *= (-1); 
		 
        v[j] += s[i];

        if(dir == 1) j++;

        else j--;
    }

    string res;

    for(auto &it : v) res += it; 

    return res;

    }
};
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Rotate Image:-

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        int mat[][]=new int[n][m];

        int k = n-1;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                mat[j][k]=matrix[i][j];
            }k--;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                matrix[i][j]=mat[i][j];
            }
    }
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Maximum Depth Of Binary Tree:-

Solution:-

#include<bits/stdc++.h>
 using namespace std;
 /**struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };**/
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};


Java:-
import java.util.*;
import java.lang.*;
class TreeNode 
{
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) 
      {
          this.val = val;
          this.left = left;
          this.right = right;
      }
}
class MaxDepth
{  
    public static int maxDepth(TreeNode root) 
    {
        if(root==null) return 0;
        
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
    

}
______________________________________________________________________________________________________________________________________________________________________
Minimum  Distance Between BST:-
Solution:-
class Solution {
public:
        void helper(TreeNode* root, int& minDiff, int& prevVal) {
        if (root == nullptr)
            return;
        helper(root -> left, minDiff, prevVal);
        if (prevVal != -1) {
            minDiff = min(minDiff, root -> val - prevVal);
        }
        prevVal = root -> val;
        helper(root -> right, minDiff, prevVal);
        
    };
        
    int minDiffInBST(TreeNode* root) {
        int minDiff = INT_MAX;
        int prevVal = -1;
        helper(root, minDiff, prevVal);
        return minDiff;
    }
    };
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pascal's Triangle:-
Solution:-

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>v;
        for (int i=0; i<numRows; i++) {
            vector<int>v1(i+1, 1);
            for (int j=1; j<i; j++) {
                v1[j]=v[i-1][j]+v[i-1][j-1];
            }
            v.push_back(v1);
        }
        return v;
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4SUM:-
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        if(target==-294967296 || target==294967296) return ans;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-3;i++){
            for(int j=i+1;j<nums.length-2;j++){
                int l=j+1,r=nums.length-1;
                while(l<r){
                    List<Integer> list=new ArrayList<>();
                    int  sum=nums[i]+nums[j]+nums[l]+nums[r];
                    if(sum==target){
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[l]);
                        list.add(nums[r]);
                        if(!ans.contains(list)){
                            ans.add(list);
                        }
                    }
                    if(sum<target){
                        l++;
                    }
                    else{
                        r--;
                    }
                }
            }
        }
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3 SUM:-
class Solution {
    public List<List<Integer>> threeSum(int[] n) {
        Arrays.sort(n);
        List<List<Integer>> list = new ArrayList<>();
        for(int i = 0 ; i<n.length-2; i++){
            if(i==0 ||(i>0 && n[i]!=n[i-1])){
                int j = i+1;
                int k = n.length -1;
                while(j < k){
                    if((n[j] + n[k]) == -(n[i]) ){
                       ArrayList<Integer> inside = new ArrayList<>();
                       inside.add(n[i]);
                       inside.add(n[j]);
                       inside.add(n[k]);
                       list.add(inside);
                        while (j < k && n[j] == n[j+1]){
                          j++;
                        }
                        while(j < k && n[k] == n[k-1]){
                          k--;
                        }
                        k--;
                        j++;
                    }
                    else if((n[j] + n[k]) > -(n[i])){
                       k--;
                    }
                    else if((n[j] + n[k]) < -(n[i])){
                       j++;
                    }
                }
            }
        }
        return list;
            
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Isormorphic String:-

class Solution {
    public boolean isIsomorphic(String s, String t) {
        
        int[] mappingDictStoT = new int[256];
        Arrays.fill(mappingDictStoT, -1);
        
        int[] mappingDictTtoS = new int[256];
        Arrays.fill(mappingDictTtoS, -1);
        
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            
            // Case 1: No mapping exists in either of the dictionaries
            if (mappingDictStoT[c1] == -1 && mappingDictTtoS[c2] == -1) {
                mappingDictStoT[c1] = c2;
                mappingDictTtoS[c2] = c1;
            }
            
            // Case 2: Ether mapping doesn't exist in one of the dictionaries or Mapping exists and
            // it doesn't match in either of the dictionaries or both 
            else if (!(mappingDictStoT[c1] == c2 && mappingDictTtoS[c2] == c1)) {
                return false;
            }
        }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Merge two sorted List:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyhead = new ListNode();
        ListNode tail = dummyhead;
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                tail.next=list1;
                list1=list1.next;
                tail=tail.next;

            } 
            else
            {
                tail.next=list2;
                list2=list2.next;
                tail=tail.next;
            }       
        }
        tail.next=(list1!=null)?list1:list2;

        return dummyhead.next;
}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Reverse Linked List:-
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode current = head;
        while(current != null)
        {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Middle value of linked list:-
class Solution {
    public ListNode middleNode(ListNode head) {
    ListNode slow = head;
    ListNode fast = head;

    while(fast!= null && fast.next!= null)
    {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow ;
}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Linked List cycle II:-
ListNode slow = head;
    ListNode fast = head;
    
    // Finding the meeting point of the slow and fast pointers
    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) {
            break;
        }
    }
    
    // If there's no cycle, return null
    if (fast == null || fast.next == null) {
        return null;
    }
    
    // Resetting the slow pointer to the head of the linked list
    slow = head;
    
    // Moving both pointers at the same speed until they meet again
    while (slow != fast) {
        slow = slow.next;
        fast = fast.next;
    }
    
    // Returning the start node of the cycle
    return slow;
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------
